type Cell { . # }

case Entry & & -> I

var a : Cell case I a a -> (I a)
var a : Cell var b : Cell case (I a) b b -> (I a b)
var a : Cell var b : Cell var c : Cell case (I a b) c c <- (R a b c)
var a : Cell var b : Cell case (I a b) & & . Print

case Print & & ! Reset1
case Reset1 & & <- Reset
var a : Cell case Reset a a <- Reset
case Reset & & -> I

var _ : Cell case (R . . .) _ . -> (I .)
var _ : Cell case (R . . #) _ # -> (I .)
var _ : Cell case (R . # .) _ # -> (I #)
var _ : Cell case (R . # #) _ # -> (I #)
var _ : Cell case (R # . .) _ . -> (I .)
var _ : Cell case (R # . #) _ # -> (I .)
var _ : Cell case (R # # .) _ # -> (I #)
var _ : Cell case (R # # #) _ . -> (I #)
